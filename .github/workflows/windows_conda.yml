name: build matrixconverters for Windows

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
    tags:
      - v[0-9].[0-9]+.[0-9]+

jobs:
  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    strategy:
      max-parallel: 5
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
    steps:
    - uses: actions/checkout@v4

    - name: Setup base conda for Python
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-activate-base: true
        activate-environment: ""
        miniforge-version: latest
        mamba-version: "*"
        channels: conda-forge,defaults
      env:
        TMPDIR: ${{ runner.TEMP }}
        CONDA_BLD_PATH: env.TMPDIR

    - name: Install dependencies and set channels
      run: |
        (
        mamba install -n base rattler-build twine
        mamba create -n test-wheels python=${{ matrix.python-version }} numpy pytest-cov h5py
        mamba create -n test-conda python=${{ matrix.python-version }} numpy pytest-cov
        )

    - name: build and test matrixconverters for python version
      env:
        CONDA_BLD_PATH: ${{ runner.TEMP }}
        TMPDIR: ${{ runner.TEMP }}
        LIBARCHIVE: C:\Miniconda\Library\bin\archive.dll
      run: |
        (
        mamba activate base
        rattler-build build --recipe .
        )

    - name: Find files matching "*.conda"
      uses: jeertmans/filesfinder@latest
      id: ff
      with:
        args: "-d ${{ env.CONDA_BLD_PATH }}/win-64 *.conda"

    - name: Upload package to conda-forge

      env:
        CONDA_BLD_PATH: ${{ runner.TEMP }}
        ANACONDA_API_KEY: ${{ secrets.ANACONDA_GITHUBACTION_TOKEN }}
        ANACONDA_OWNER: MaxBo
      if: ${{ env.ANACONDA_API_KEY }}

      run: |
        (
        mamba activate base

        for %%i in (${{ steps.ff.outputs.files }}); do
          rattler-build upload anaconda ${{ env.CONDA_BLD_PATH }}\win-64\${i}
        done
        )

    - name: Build wheel and run tests for matrixconverters
      run: |
        (
        mamba activate test-wheels
        cd matrixconverters
        echo "build matrixconverters from folder %CD%"
        pip install build
        pip install .
        python -m pytest --pyargs matrixconverters
        python -m build -n .
        echo "### All tests with pip passed! :rocket:" >> $GITHUB_STEP_SUMMARY
        )

    - name: run code coverage
      if: ${{ matrix.python-version == '3.13' }}
      run: |
        (
        mamba activate test-wheels
        cd matrixconverters
        echo "build matrixconverters -e from folder %CD%"
        pip install -e .
        pytest --cov=src --cov-report xml --pyargs matrixconverters
        coverage xml
        echo "### Code Coverage checked! :rocket:" >> $GITHUB_STEP_SUMMARY
        )

    - name: Upload to Codecov
      if: ${{ matrix.python-version == '3.13' }}
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./matrixconverters/coverage.xml
        flags: unittests # optional
        fail_ci_if_error: true # optional (default = false)

    - name: Publish matrixconverters to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: '__token__'
      run: |
        (
        mamba activate base
        twine upload --skip-existing -p ${{ secrets.PYPI_MATRIXCONVERTERS }} matrixconverters\dist\*
        )

    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
      timeout-minutes: 60
      with:
        detached: true

